openapi: 3.0.0
info:
  title: Sample API
  description: A sample API to demonstrate Swaglex features
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                    example: 2023-12-01T10:00:00Z
                  version:
                    type: string
                    example: 1.0.0

  /users:
    get:
      summary: Get all users
      description: Retrieve a paginated list of users
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a new user
      description: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update user
      description: Update an existing user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Delete user
      description: Delete a user account
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique user identifier
        email:
          type: string
          format: email
          example: john.doe@example.com
          description: User's email address
        name:
          type: string
          example: John Doe
          description: User's full name
        role:
          type: string
          enum: [user, admin]
          example: user
          description: User's role
        isActive:
          type: boolean
          example: true
          description: Whether the user account is active
        createdAt:
          type: string
          format: date-time
          example: 2023-12-01T10:00:00Z
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          example: 2023-12-01T10:00:00Z
          description: Last update timestamp

    CreateUser:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
          description: User's email address
        name:
          type: string
          example: John Doe
          minLength: 2
          maxLength: 100
          description: User's full name
        password:
          type: string
          format: password
          minLength: 8
          example: SecurePassword123!
          description: User's password

    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
          description: User's email address
        name:
          type: string
          example: John Doe
          minLength: 2
          maxLength: 100
          description: User's full name
        isActive:
          type: boolean
          example: true
          description: Whether the user account is active

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: Current page number
        limit:
          type: integer
          example: 10
          description: Items per page
        total:
          type: integer
          example: 100
          description: Total number of items
        totalPages:
          type: integer
          example: 10
          description: Total number of pages

    Error:
      type: object
      properties:
        error:
          type: string
          example: Validation failed
          description: Error message
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
                description: Field that caused the error
              message:
                type: string
                example: Email is required
                description: Detailed error message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authentication required

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: User not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
