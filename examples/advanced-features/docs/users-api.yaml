openapi: 3.0.0
info:
  title: E-commerce User Management API
  description: |
    Comprehensive user management API for e-commerce platform.

    ## Authentication
    This API uses JWT tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Error Handling
    The API uses standard HTTP status codes and returns error details in JSON format.

  version: 2.0.0
  contact:
    name: API Support Team
    email: api-support@ecommerce.example.com
    url: https://support.ecommerce.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v2
    description: Development server
  - url: https://api.ecommerce.example.com/v2
    description: Production server

security:
  - bearerAuth: []

paths:
  /users:
    get:
      summary: List users
      description: Retrieve a paginated list of users with optional filtering
      tags:
        - User Management
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [admin, manager, customer, vendor]
        - name: status
          in: query
          description: Filter by user status
          required: false
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: search
          in: query
          description: Search users by name or email
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 100
      responses:
        '200':
          description: List of users with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  filters:
                    type: object
                    properties:
                      role:
                        type: string
                      status:
                        type: string
                      search:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create new user
      description: Create a new user account with role-based permissions
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
            examples:
              customer:
                summary: Create a customer account
                value:
                  email: 'customer@example.com'
                  password: 'SecurePassword123!'
                  firstName: 'John'
                  lastName: 'Doe'
                  role: 'customer'
                  profile:
                    phone: '+1-555-0123'
                    dateOfBirth: '1990-01-15'
              vendor:
                summary: Create a vendor account
                value:
                  email: 'vendor@example.com'
                  password: 'VendorPass456!'
                  firstName: 'Jane'
                  lastName: 'Smith'
                  role: 'vendor'
                  profile:
                    companyName: "Smith's Electronics"
                    businessLicense: 'BL123456789'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User created successfully'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve detailed information about a specific user
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailed'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update user
      description: Update user information (admin or self-update only)
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User updated successfully'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete user
      description: Soft delete a user account (admin only)
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User deleted successfully'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{userId}/activate:
    post:
      summary: Activate user account
      description: Activate a suspended or inactive user account
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User activated successfully'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{userId}/suspend:
    post:
      summary: Suspend user account
      description: Suspend a user account temporarily
      tags:
        - User Management
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  minLength: 10
                  maxLength: 500
                  example: 'Violation of terms of service'
                duration:
                  type: integer
                  description: Suspension duration in days (0 for indefinite)
                  minimum: 0
                  example: 30
      responses:
        '200':
          description: User suspended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User suspended successfully'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        email:
          type: string
          format: email
          example: 'user@example.com'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        role:
          type: string
          enum: [admin, manager, customer, vendor]
          example: 'customer'
        status:
          type: string
          enum: [active, inactive, suspended]
          example: 'active'
        emailVerified:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
        createdAt:
          type: string
          format: date-time
          example: '2023-11-01T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'

    UserDetailed:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            profile:
              type: object
              properties:
                phone:
                  type: string
                  example: '+1-555-0123'
                avatar:
                  type: string
                  format: uri
                  example: 'https://example.com/avatars/user123.jpg'
                dateOfBirth:
                  type: string
                  format: date
                  example: '1990-01-15'
                address:
                  $ref: '#/components/schemas/Address'
                preferences:
                  type: object
                  properties:
                    language:
                      type: string
                      example: 'en'
                    timezone:
                      type: string
                      example: 'America/New_York'
                    emailNotifications:
                      type: boolean
                      example: true

    CreateUser:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - role
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        password:
          type: string
          format: password
          minLength: 8
          example: 'SecurePassword123!'
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'Doe'
        role:
          type: string
          enum: [customer, vendor]
          example: 'customer'
        profile:
          type: object
          properties:
            phone:
              type: string
              example: '+1-555-0123'
            dateOfBirth:
              type: string
              format: date
              example: '1990-01-15'
            companyName:
              type: string
              example: "Smith's Electronics"
            businessLicense:
              type: string
              example: 'BL123456789'

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'John'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: 'Doe'
        profile:
          type: object
          properties:
            phone:
              type: string
              example: '+1-555-0123'
            avatar:
              type: string
              format: uri
              example: 'https://example.com/avatars/user123.jpg'
            address:
              $ref: '#/components/schemas/Address'
            preferences:
              type: object
              properties:
                language:
                  type: string
                  example: 'en'
                timezone:
                  type: string
                  example: 'America/New_York'
                emailNotifications:
                  type: boolean
                  example: true

    Address:
      type: object
      properties:
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'New York'
        state:
          type: string
          example: 'NY'
        postalCode:
          type: string
          example: '10001'
        country:
          type: string
          example: 'US'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8
        hasNextPage:
          type: boolean
          example: true
        hasPrevPage:
          type: boolean
          example: false

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: 'Validation failed'
        message:
          type: string
          example: 'The request could not be processed'
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: 'email'
              code:
                type: string
                example: 'INVALID_FORMAT'
              message:
                type: string
                example: 'Email format is invalid'
        timestamp:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
        path:
          type: string
          example: '/api/v2/users'

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Authentication required'
              message:
                type: string
                example: 'Please provide a valid JWT token'

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'Insufficient permissions'
              message:
                type: string
                example: "You don't have permission to perform this action"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 'User not found'
              message:
                type: string
                example: 'The requested user could not be found'
