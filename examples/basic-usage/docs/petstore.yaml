openapi: 3.0.0
info:
  title: Simple Pet Store API
  description: A simple example API for a pet store
  version: 1.0.0
  contact:
    name: Pet Store Support
    email: support@petstore.example.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

paths:
  /pets:
    get:
      summary: List all pets
      description: Retrieve a list of all pets in the store
      tags:
        - Pets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a pet
      description: Add a new pet to the store
      tags:
        - Pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets/{petId}:
    get:
      summary: Get a pet by ID
      description: Retrieve a specific pet by its ID
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a pet
      description: Update an existing pet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The ID of the pet to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 123
          description: Pet ID
        name:
          type: string
          example: 'Fluffy'
          description: Pet name
        category:
          type: string
          example: 'cat'
          description: Pet category
        photoUrls:
          type: array
          items:
            type: string
          example: ['https://example.com/photo1.jpg']
          description: Pet photo URLs
        tags:
          type: array
          items:
            type: string
          example: ['friendly', 'indoor']
          description: Pet tags
        status:
          type: string
          enum: [available, pending, sold]
          example: 'available'
          description: Pet status

    NewPet:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: 'Fluffy'
          description: Pet name
        category:
          type: string
          example: 'cat'
          description: Pet category
        photoUrls:
          type: array
          items:
            type: string
          example: ['https://example.com/photo1.jpg']
          description: Pet photo URLs
        tags:
          type: array
          items:
            type: string
          example: ['friendly', 'indoor']
          description: Pet tags
        status:
          type: string
          enum: [available, pending, sold]
          example: 'available'
          description: Pet status

    UpdatePet:
      type: object
      properties:
        name:
          type: string
          example: 'Fluffy'
          description: Pet name
        category:
          type: string
          example: 'cat'
          description: Pet category
        photoUrls:
          type: array
          items:
            type: string
          example: ['https://example.com/photo1.jpg']
          description: Pet photo URLs
        tags:
          type: array
          items:
            type: string
          example: ['friendly', 'indoor']
          description: Pet tags
        status:
          type: string
          enum: [available, pending, sold]
          example: 'available'
          description: Pet status

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: 'Pet not found'
          description: Error message
        details:
          type: string
          example: 'The pet with ID 123 was not found'
          description: Detailed error message
